

1. Consider the following generalization of the Activity Selection Problem: 
You are given a set of n activities each with a start time si, a finish time fi, 
and a weight wi. Design a dynamic programming algorithm to find the weight of a set of 
non-conflicting activities with maximum weight.


*Preprocess: sort by start/finish times*

Definition: 
AS[i] = weight of the set of non conflicting activities of max weight drawing from 
activities 1 through i including activity i.

Base Case(s): 
AS[0] = 0, AS[1] = w1

Solution: 
Max{AS[i]}

Formula: 
AS[i] = Max Fs.t. Fj <= si {AS[j] + wi}




PreProcess: Sort the time by the start time; If start time is a tie, sort by finish time

Definition: Let AS[i] = weight of the set of non-conflicting activities of maximum 
        weight drawing from activities 1 through i including i 

Base Case: AS[0] = 0, AS[1] = w1

Solution: Max{AS[i]}   

Formula: AS[i] = Max {AS[j] + w[i]} where s[i] >= f[j]



Input: 2-3(3) 2-4(1) 3-7(4) 5-6(5) 5-8(1)


        2-3     2-4     3-7     5-6     5-8 
AS[i]   3       3       7       8       8         
